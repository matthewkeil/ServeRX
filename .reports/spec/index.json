{
  "stats": {
    "suites": 15,
    "tests": 30,
    "passes": 30,
    "pending": 0,
    "failures": 0,
    "start": "2018-02-05T15:33:18.906Z",
    "end": "2018-02-05T15:33:18.932Z",
    "duration": 26,
    "testsRegistered": 30,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "CaseChange",
        "suites": [
          {
            "title": "separateWords()",
            "suites": [],
            "tests": [
              {
                "title": "should break words at lower to upper case transitions",
                "fullTitle": "CaseChange separateWords() should break words at lower to upper case transitions",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('firstTest')).to.deep.equal(['first', 'test']);",
                "err": {},
                "isRoot": false,
                "uuid": "106552b3-8b2d-4d52-8da7-dce0bca7377d",
                "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should break words and numbers apart",
                "fullTitle": "CaseChange separateWords() should break words and numbers apart",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('test123test456Test')).to.deep.equal(['test', '123', 'test', '456', 'test']);",
                "err": {},
                "isRoot": false,
                "uuid": "9a943e27-1007-4a6c-9b42-7f6240b165dd",
                "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should recognize all separators and multiples of each",
                "fullTitle": "CaseChange separateWords() should recognize all separators and multiples of each",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('this-is____just |||a.test:yo')).to.deep.equal(testString);",
                "err": {},
                "isRoot": false,
                "uuid": "3c4dab75-0243-4ea5-b9d1-587dd4a35026",
                "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should strip unknown characters as separators",
                "fullTitle": "CaseChange separateWords() should strip unknown characters as separators",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('this-is____just!!¶•¶•a.test:yo')).to.deep.equal(testString);",
                "err": {},
                "isRoot": false,
                "uuid": "90790850-5bc7-45da-a668-09f2cb8868be",
                "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/Users/matthewkeil/dev/ServeRx/.build/common/CaseChange.spec.js",
            "uuid": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/CaseChange.spec.js",
            "passes": [
              {
                "title": "should break words at lower to upper case transitions",
                "fullTitle": "CaseChange separateWords() should break words at lower to upper case transitions",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('firstTest')).to.deep.equal(['first', 'test']);",
                "err": {},
                "isRoot": false,
                "uuid": "106552b3-8b2d-4d52-8da7-dce0bca7377d",
                "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should break words and numbers apart",
                "fullTitle": "CaseChange separateWords() should break words and numbers apart",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('test123test456Test')).to.deep.equal(['test', '123', 'test', '456', 'test']);",
                "err": {},
                "isRoot": false,
                "uuid": "9a943e27-1007-4a6c-9b42-7f6240b165dd",
                "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should recognize all separators and multiples of each",
                "fullTitle": "CaseChange separateWords() should recognize all separators and multiples of each",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('this-is____just |||a.test:yo')).to.deep.equal(testString);",
                "err": {},
                "isRoot": false,
                "uuid": "3c4dab75-0243-4ea5-b9d1-587dd4a35026",
                "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should strip unknown characters as separators",
                "fullTitle": "CaseChange separateWords() should strip unknown characters as separators",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('this-is____just!!¶•¶•a.test:yo')).to.deep.equal(testString);",
                "err": {},
                "isRoot": false,
                "uuid": "90790850-5bc7-45da-a668-09f2cb8868be",
                "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "handleCapsAndJoin()",
            "suites": [],
            "tests": [
              {
                "title": "should properly output capitalization and add separators",
                "fullTitle": "CaseChange handleCapsAndJoin() should properly output capitalization and add separators",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, ' ', CaseChange_1.CaseChange.To.upper)).to.equal('THIS IS JUST A TEST YO');\nchai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, '', CaseChange_1.CaseChange.To.title)).to.equal('ThisIsJustATestYo');\nchai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, ' booga ', CaseChange_1.CaseChange.To.title)).to.equal('This booga Is booga Just booga A booga Test booga Yo');",
                "err": {},
                "isRoot": false,
                "uuid": "c4c5f40c-e3c6-4122-90b5-a4cc42991228",
                "parentUUID": "3f9728b2-9d8a-42e4-9692-6630ed89d36b",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/Users/matthewkeil/dev/ServeRx/.build/common/CaseChange.spec.js",
            "uuid": "3f9728b2-9d8a-42e4-9692-6630ed89d36b",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/CaseChange.spec.js",
            "passes": [
              {
                "title": "should properly output capitalization and add separators",
                "fullTitle": "CaseChange handleCapsAndJoin() should properly output capitalization and add separators",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, ' ', CaseChange_1.CaseChange.To.upper)).to.equal('THIS IS JUST A TEST YO');\nchai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, '', CaseChange_1.CaseChange.To.title)).to.equal('ThisIsJustATestYo');\nchai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, ' booga ', CaseChange_1.CaseChange.To.title)).to.equal('This booga Is booga Just booga A booga Test booga Yo');",
                "err": {},
                "isRoot": false,
                "uuid": "c4c5f40c-e3c6-4122-90b5-a4cc42991228",
                "parentUUID": "3f9728b2-9d8a-42e4-9692-6630ed89d36b",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/Users/matthewkeil/dev/ServeRx/.build/common/CaseChange.spec.js",
        "uuid": "f9c3c337-bf06-4cc6-ad66-a46970cc8038",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/CaseChange.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Path",
        "suites": [
          {
            "title": "static functions",
            "suites": [
              {
                "title": "validateIdentifier()",
                "suites": [],
                "tests": [
                  {
                    "title": "should only return a value for strings",
                    "fullTitle": "static functions validateIdentifier() should only return a value for strings",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(_1.Path.validateIdentifier(3)).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier({})).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier(['identifier'])).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier(true)).to.equal(undefined);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "355a69a7-4d27-4673-bc13-7b9739879236",
                    "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns a valid string",
                    "fullTitle": "static functions validateIdentifier() returns a valid string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(_1.Path.validateIdentifier(':A-Valid_Identifier0123'))\n    .to.equal(':A-Valid_Identifier0123');\nchai_1.expect(_1.Path.validateIdentifier('A-Valid_Identifier0123'))\n    .to.equal('A-Valid_Identifier0123');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8fe9752-308e-45df-a5a3-0331ad8a1898",
                    "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "return an error for invalid strings",
                    "fullTitle": "static functions validateIdentifier() return an error for invalid strings",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(_1.Path.validateIdentifier('&34')).to.throw;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10640a45-e357-49df-a0c0-e8a522024ef1",
                    "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                "uuid": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                "passes": [
                  {
                    "title": "should only return a value for strings",
                    "fullTitle": "static functions validateIdentifier() should only return a value for strings",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(_1.Path.validateIdentifier(3)).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier({})).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier(['identifier'])).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier(true)).to.equal(undefined);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "355a69a7-4d27-4673-bc13-7b9739879236",
                    "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns a valid string",
                    "fullTitle": "static functions validateIdentifier() returns a valid string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(_1.Path.validateIdentifier(':A-Valid_Identifier0123'))\n    .to.equal(':A-Valid_Identifier0123');\nchai_1.expect(_1.Path.validateIdentifier('A-Valid_Identifier0123'))\n    .to.equal('A-Valid_Identifier0123');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8fe9752-308e-45df-a5a3-0331ad8a1898",
                    "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "return an error for invalid strings",
                    "fullTitle": "static functions validateIdentifier() return an error for invalid strings",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(_1.Path.validateIdentifier('&34')).to.throw;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10640a45-e357-49df-a0c0-e8a522024ef1",
                    "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "validateSegment()",
                "suites": [
                  {
                    "title": "recognizes strings",
                    "suites": [],
                    "tests": [
                      {
                        "title": "should return the root identifier",
                        "fullTitle": "validateSegment() recognizes strings should return the root identifier",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "chai_1.expect(_1.Path.validateSegment('~')).to.equal('~');",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b2dd536f-3a17-4035-8511-4d0a57adae75",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should capture valid string identifiers",
                        "fullTitle": "validateSegment() recognizes strings should capture valid string identifiers",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "seg = 'users';\nSEG = 'users';\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "88a64cf7-b663-46f3-97f8-a993fbb7cf4b",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should ignore preceding and trailing slashes",
                        "fullTitle": "validateSegment() recognizes strings should ignore preceding and trailing slashes",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "seg = '/users/';\nSEG = 'users';\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c60904d9-17d7-4bd4-9ca3-0d440bd1310c",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should recognize star parameters",
                        "fullTitle": "validateSegment() recognizes strings should recognize star parameters",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "seg = ':users';\nSEG = [':users', null];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "004e34a7-c2e2-4377-a23f-96489bcf38a3",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should recognize parameters with values",
                        "fullTitle": "validateSegment() recognizes strings should recognize parameters with values",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "seg = 'users=mkeil';\nSEG = [':users', 'mkeil'];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);\nseg = '/:users=mkeil/';\nSEG = [':users', 'mkeil'];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "837a7f13-bbc7-4ac1-9e1b-e3b5a05c8d23",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                    "uuid": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                    "passes": [
                      {
                        "title": "should return the root identifier",
                        "fullTitle": "validateSegment() recognizes strings should return the root identifier",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "chai_1.expect(_1.Path.validateSegment('~')).to.equal('~');",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b2dd536f-3a17-4035-8511-4d0a57adae75",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should capture valid string identifiers",
                        "fullTitle": "validateSegment() recognizes strings should capture valid string identifiers",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "seg = 'users';\nSEG = 'users';\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "88a64cf7-b663-46f3-97f8-a993fbb7cf4b",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should ignore preceding and trailing slashes",
                        "fullTitle": "validateSegment() recognizes strings should ignore preceding and trailing slashes",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "seg = '/users/';\nSEG = 'users';\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c60904d9-17d7-4bd4-9ca3-0d440bd1310c",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should recognize star parameters",
                        "fullTitle": "validateSegment() recognizes strings should recognize star parameters",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "seg = ':users';\nSEG = [':users', null];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "004e34a7-c2e2-4377-a23f-96489bcf38a3",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "should recognize parameters with values",
                        "fullTitle": "validateSegment() recognizes strings should recognize parameters with values",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "seg = 'users=mkeil';\nSEG = [':users', 'mkeil'];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);\nseg = '/:users=mkeil/';\nSEG = [':users', 'mkeil'];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "837a7f13-bbc7-4ac1-9e1b-e3b5a05c8d23",
                        "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasBeforeHooks": false,
                    "hasAfterHooks": false,
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 5,
                    "totalPasses": 5,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 0,
                    "rootEmpty": false
                  },
                  {
                    "title": "recognizes parameters",
                    "suites": [],
                    "tests": [
                      {
                        "title": "only takes arrays with two items",
                        "fullTitle": "validateSegment() recognizes parameters only takes arrays with two items",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let SEG = [':users', null];\nlet seg = [':users', null];\nchai_1.expect(_1.Path.validateSegment(seg)).to.deep.equal(SEG);\nseg = [':users', null, 'booga'];\nchai_1.expect(_1.Path.validateSegment(seg)).to.equal(undefined);\nseg = [':users'];\nchai_1.expect(_1.Path.validateSegment(seg)).to.equal(undefined);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "16732ff5-df11-48ec-af29-cd96ceffe36a",
                        "parentUUID": "4377987d-7f67-4511-b99f-72c0c79fb023",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "allows for string, null and undefined as param values",
                        "fullTitle": "validateSegment() recognizes parameters allows for string, null and undefined as param values",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let seg = [':users', null];\nlet SEG = [':users', null];\nchai_1.expect(seg).to.deep.equal(SEG);\nseg = [':users', undefined];\nSEG = [':users', undefined];\nchai_1.expect(seg).to.deep.equal(SEG);\nseg = [':users', 'string'];\nSEG = [':users', 'string'];\nchai_1.expect(seg).to.deep.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "98603286-b721-4507-b32b-38c5108f81d5",
                        "parentUUID": "4377987d-7f67-4511-b99f-72c0c79fb023",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "pending": [],
                    "root": false,
                    "_timeout": 2000,
                    "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                    "uuid": "4377987d-7f67-4511-b99f-72c0c79fb023",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                    "passes": [
                      {
                        "title": "only takes arrays with two items",
                        "fullTitle": "validateSegment() recognizes parameters only takes arrays with two items",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let SEG = [':users', null];\nlet seg = [':users', null];\nchai_1.expect(_1.Path.validateSegment(seg)).to.deep.equal(SEG);\nseg = [':users', null, 'booga'];\nchai_1.expect(_1.Path.validateSegment(seg)).to.equal(undefined);\nseg = [':users'];\nchai_1.expect(_1.Path.validateSegment(seg)).to.equal(undefined);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "16732ff5-df11-48ec-af29-cd96ceffe36a",
                        "parentUUID": "4377987d-7f67-4511-b99f-72c0c79fb023",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "allows for string, null and undefined as param values",
                        "fullTitle": "validateSegment() recognizes parameters allows for string, null and undefined as param values",
                        "timedOut": false,
                        "duration": 0,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "let seg = [':users', null];\nlet SEG = [':users', null];\nchai_1.expect(seg).to.deep.equal(SEG);\nseg = [':users', undefined];\nSEG = [':users', undefined];\nchai_1.expect(seg).to.deep.equal(SEG);\nseg = [':users', 'string'];\nSEG = [':users', 'string'];\nchai_1.expect(seg).to.deep.equal(SEG);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "98603286-b721-4507-b32b-38c5108f81d5",
                        "parentUUID": "4377987d-7f67-4511-b99f-72c0c79fb023",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "failures": [],
                    "skipped": [],
                    "hasBeforeHooks": false,
                    "hasAfterHooks": false,
                    "hasTests": true,
                    "hasSuites": false,
                    "totalTests": 2,
                    "totalPasses": 2,
                    "totalFailures": 0,
                    "totalPending": 0,
                    "totalSkipped": 0,
                    "hasPasses": true,
                    "hasFailures": false,
                    "hasPending": false,
                    "hasSkipped": false,
                    "duration": 0,
                    "rootEmpty": false
                  }
                ],
                "tests": [],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                "uuid": "aa857a65-0bfc-4dae-af59-52c701266e5c",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                "passes": [],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": false,
                "hasSuites": true,
                "totalTests": 0,
                "totalPasses": 0,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": false,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "validate",
                "suites": [],
                "tests": [
                  {
                    "title": "should recognize the root indicator",
                    "fullTitle": "static functions validate should recognize the root indicator",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(results).to.deep.equal(PATH);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9bd9dc8c-e25d-41fb-8197-d1b90a72feff",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should only allow the root indicator to be first",
                    "fullTitle": "static functions validate should only allow the root indicator to be first",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = ['booga', '~', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c590477a-fdf8-4bdb-a916-fd70d904762f",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should split segmented strings properly",
                    "fullTitle": "static functions validate should split segmented strings properly",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = '~/booga/boo';\nPATH = ['~', 'booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga/boo';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga/boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga//boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;\npath = 'booga/boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "501d5995-e8db-4754-b129-54926d4e72e8",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should return undefined if no valid segments are found",
                    "fullTitle": "static functions validate should return undefined if no valid segments are found",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = ['bo#oga&\"', '#?boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.equal(undefined);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61be675f-9630-42d5-a2fb-d71be5672abd",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should only throw if a valid segment is found as well",
                    "fullTitle": "static functions validate should only throw if a valid segment is found as well",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = ['valid1', 'bo#oga&\"', '#?boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cae06ebc-7758-4b24-a1e7-58ac00c6e3f9",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should only throw if a valid segment is found as well",
                    "fullTitle": "static functions validate should only throw if a valid segment is found as well",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = ['bo#oga&\"', { invalid: 'bummer' }, 'valid2'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.be.instanceof(_1.PathError);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04620d89-dbcc-4e87-9df9-ae80f920e438",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                "uuid": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
                "passes": [
                  {
                    "title": "should recognize the root indicator",
                    "fullTitle": "static functions validate should recognize the root indicator",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(results).to.deep.equal(PATH);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9bd9dc8c-e25d-41fb-8197-d1b90a72feff",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should only allow the root indicator to be first",
                    "fullTitle": "static functions validate should only allow the root indicator to be first",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = ['booga', '~', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c590477a-fdf8-4bdb-a916-fd70d904762f",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should split segmented strings properly",
                    "fullTitle": "static functions validate should split segmented strings properly",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = '~/booga/boo';\nPATH = ['~', 'booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga/boo';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga/boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga//boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;\npath = 'booga/boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "501d5995-e8db-4754-b129-54926d4e72e8",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should return undefined if no valid segments are found",
                    "fullTitle": "static functions validate should return undefined if no valid segments are found",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = ['bo#oga&\"', '#?boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.equal(undefined);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61be675f-9630-42d5-a2fb-d71be5672abd",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should only throw if a valid segment is found as well",
                    "fullTitle": "static functions validate should only throw if a valid segment is found as well",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = ['valid1', 'bo#oga&\"', '#?boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cae06ebc-7758-4b24-a1e7-58ac00c6e3f9",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should only throw if a valid segment is found as well",
                    "fullTitle": "static functions validate should only throw if a valid segment is found as well",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "path = ['bo#oga&\"', { invalid: 'bummer' }, 'valid2'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.be.instanceof(_1.PathError);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04620d89-dbcc-4e87-9df9-ae80f920e438",
                    "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "uuid": "8ad9d75c-4fcd-4fec-912c-c4889c567974",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "path.last",
            "suites": [],
            "tests": [
              {
                "title": "should return the last segment of the Path",
                "fullTitle": "Path path.last should return the last segment of the Path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(path.last).to.deep.equal([':boo', null]);",
                "err": {},
                "isRoot": false,
                "uuid": "4fa7acb2-059c-4a28-8577-fd6f7e690991",
                "parentUUID": "59022e37-b548-4c06-ab72-00f5a45b0783",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be able to be set to a valid segment",
                "fullTitle": "Path path.last should only be able to be set to a valid segment",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let good = 'good';\nlet bad = ['bad', { segment: true }];\nchai_1.expect(path.last = good).to.equal(good);\nchai_1.expect(path.last = bad).to.throw;",
                "err": {},
                "isRoot": false,
                "uuid": "201d7cb4-5087-4acc-a12c-8af46e89a903",
                "parentUUID": "59022e37-b548-4c06-ab72-00f5a45b0783",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "uuid": "59022e37-b548-4c06-ab72-00f5a45b0783",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "passes": [
              {
                "title": "should return the last segment of the Path",
                "fullTitle": "Path path.last should return the last segment of the Path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(path.last).to.deep.equal([':boo', null]);",
                "err": {},
                "isRoot": false,
                "uuid": "4fa7acb2-059c-4a28-8577-fd6f7e690991",
                "parentUUID": "59022e37-b548-4c06-ab72-00f5a45b0783",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be able to be set to a valid segment",
                "fullTitle": "Path path.last should only be able to be set to a valid segment",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let good = 'good';\nlet bad = ['bad', { segment: true }];\nchai_1.expect(path.last = good).to.equal(good);\nchai_1.expect(path.last = bad).to.throw;",
                "err": {},
                "isRoot": false,
                "uuid": "201d7cb4-5087-4acc-a12c-8af46e89a903",
                "parentUUID": "59022e37-b548-4c06-ab72-00f5a45b0783",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "path.identifier",
            "suites": [],
            "tests": [
              {
                "title": "should return the last identifier of the Path",
                "fullTitle": "Path path.identifier should return the last identifier of the Path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(path.identifier).to.equal(':boo');",
                "err": {},
                "isRoot": false,
                "uuid": "888bc8cd-1e1f-46c3-9809-98ce0b1e243f",
                "parentUUID": "af4ad610-640f-44e3-8058-5673aeb9d7df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be able to be set to a valid identifier",
                "fullTitle": "Path path.identifier should only be able to be set to a valid identifier",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let good = 'good';\nlet bad = { booga: 'boo' };\nchai_1.expect(path.identifier = good).to.equal(good);\nchai_1.expect(path.identifier = bad).to.throw;",
                "err": {},
                "isRoot": false,
                "uuid": "f317ca4e-5984-45ac-8c66-d63fe0d2ab04",
                "parentUUID": "af4ad610-640f-44e3-8058-5673aeb9d7df",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "uuid": "af4ad610-640f-44e3-8058-5673aeb9d7df",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "passes": [
              {
                "title": "should return the last identifier of the Path",
                "fullTitle": "Path path.identifier should return the last identifier of the Path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(path.identifier).to.equal(':boo');",
                "err": {},
                "isRoot": false,
                "uuid": "888bc8cd-1e1f-46c3-9809-98ce0b1e243f",
                "parentUUID": "af4ad610-640f-44e3-8058-5673aeb9d7df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be able to be set to a valid identifier",
                "fullTitle": "Path path.identifier should only be able to be set to a valid identifier",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let good = 'good';\nlet bad = { booga: 'boo' };\nchai_1.expect(path.identifier = good).to.equal(good);\nchai_1.expect(path.identifier = bad).to.throw;",
                "err": {},
                "isRoot": false,
                "uuid": "f317ca4e-5984-45ac-8c66-d63fe0d2ab04",
                "parentUUID": "af4ad610-640f-44e3-8058-5673aeb9d7df",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "path.value",
            "suites": [],
            "tests": [
              {
                "title": "should return the last value of the Path",
                "fullTitle": "Path path.value should return the last value of the Path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(path.value).to.equal('shakalaka');",
                "err": {},
                "isRoot": false,
                "uuid": "4a81db9c-c1dc-42e5-8488-4a79a3d4868d",
                "parentUUID": "22a61df8-00a0-4b34-b641-317c2ec280d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be able to be set to a valid value",
                "fullTitle": "Path path.value should only be able to be set to a valid value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let good = 'shaboom';\nlet bad = { booga: 'boo' };\nchai_1.expect(path.value = good).to.equal(good);\nchai_1.expect(path.value = bad).to.throw;",
                "err": {},
                "isRoot": false,
                "uuid": "78279a20-1964-4039-94ed-9065626b623d",
                "parentUUID": "22a61df8-00a0-4b34-b641-317c2ec280d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "uuid": "22a61df8-00a0-4b34-b641-317c2ec280d1",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "passes": [
              {
                "title": "should return the last value of the Path",
                "fullTitle": "Path path.value should return the last value of the Path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(path.value).to.equal('shakalaka');",
                "err": {},
                "isRoot": false,
                "uuid": "4a81db9c-c1dc-42e5-8488-4a79a3d4868d",
                "parentUUID": "22a61df8-00a0-4b34-b641-317c2ec280d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be able to be set to a valid value",
                "fullTitle": "Path path.value should only be able to be set to a valid value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let good = 'shaboom';\nlet bad = { booga: 'boo' };\nchai_1.expect(path.value = good).to.equal(good);\nchai_1.expect(path.value = bad).to.throw;",
                "err": {},
                "isRoot": false,
                "uuid": "78279a20-1964-4039-94ed-9065626b623d",
                "parentUUID": "22a61df8-00a0-4b34-b641-317c2ec280d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "path.isFromRoot",
            "suites": [],
            "tests": [
              {
                "title": "should only be true if from root",
                "fullTitle": "Path path.isFromRoot should only be true if from root",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(path.isFromRoot).to.be.true;\npath = new _1.Path(['booga', [':boom', 'shakalaka']]);\nchai_1.expect(path.isFromRoot).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "0f5e4b23-209f-4a53-ae4e-4ea8eaa56963",
                "parentUUID": "9ea982ac-4049-40a0-a0c9-200ca9f091b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "uuid": "9ea982ac-4049-40a0-a0c9-200ca9f091b8",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "passes": [
              {
                "title": "should only be true if from root",
                "fullTitle": "Path path.isFromRoot should only be true if from root",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(path.isFromRoot).to.be.true;\npath = new _1.Path(['booga', [':boom', 'shakalaka']]);\nchai_1.expect(path.isFromRoot).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "0f5e4b23-209f-4a53-ae4e-4ea8eaa56963",
                "parentUUID": "9ea982ac-4049-40a0-a0c9-200ca9f091b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "path.isHere()",
            "suites": [],
            "tests": [
              {
                "title": "should only be able to match valid paths",
                "fullTitle": "Path path.isHere() should only be able to match valid paths",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let bad = '~/Bad~Bad/path';\n// console.log(Path.match(bad, path)[1]);\n// expect((<Error>Path.match(bad, path)[1]).message).to.deep.equal(['path is invalid']);\n// expect((<Error>Path.match(bad, path)[1])).to.throw(Error)\n// \t.which.has.property('message', 'path is invalid');\n// result = [['no'], new PathError('here is invalid')];\n// expect((<Error>Path.match(path, bad)[1]).message).to.equal('here is invalid');",
                "err": {},
                "isRoot": false,
                "uuid": "8bdbdc83-34d0-4751-9324-4d45ffc07c72",
                "parentUUID": "79eaf9ff-91f5-4169-abc7-be8f0615a95a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should match routes along similar paths",
                "fullTitle": "Path path.isHere() should match routes along similar paths",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let good = [['yes', 'yes', 'yes'], path];\nlet bad = [['yes', 'no']];\nchai_1.expect(_1.Path.match(path, isHere)).to.deep.equal(good);\n// expect(Path.match(path, notHere)[1]).to.throw(PathError, /path not along this path/);",
                "err": {},
                "isRoot": false,
                "uuid": "e70dfba6-5119-485a-b2bb-4472e1fef2eb",
                "parentUUID": "79eaf9ff-91f5-4169-abc7-be8f0615a95a",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "uuid": "79eaf9ff-91f5-4169-abc7-be8f0615a95a",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
            "passes": [
              {
                "title": "should only be able to match valid paths",
                "fullTitle": "Path path.isHere() should only be able to match valid paths",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let bad = '~/Bad~Bad/path';\n// console.log(Path.match(bad, path)[1]);\n// expect((<Error>Path.match(bad, path)[1]).message).to.deep.equal(['path is invalid']);\n// expect((<Error>Path.match(bad, path)[1])).to.throw(Error)\n// \t.which.has.property('message', 'path is invalid');\n// result = [['no'], new PathError('here is invalid')];\n// expect((<Error>Path.match(path, bad)[1]).message).to.equal('here is invalid');",
                "err": {},
                "isRoot": false,
                "uuid": "8bdbdc83-34d0-4751-9324-4d45ffc07c72",
                "parentUUID": "79eaf9ff-91f5-4169-abc7-be8f0615a95a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should match routes along similar paths",
                "fullTitle": "Path path.isHere() should match routes along similar paths",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let good = [['yes', 'yes', 'yes'], path];\nlet bad = [['yes', 'no']];\nchai_1.expect(_1.Path.match(path, isHere)).to.deep.equal(good);\n// expect(Path.match(path, notHere)[1]).to.throw(PathError, /path not along this path/);",
                "err": {},
                "isRoot": false,
                "uuid": "e70dfba6-5119-485a-b2bb-4472e1fef2eb",
                "parentUUID": "79eaf9ff-91f5-4169-abc7-be8f0615a95a",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
        "uuid": "00776b90-5734-49be-b8fe-b82bb80382c8",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/matthewkeil/dev/ServeRx/.build/common/Path.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "e8c2cf7b-5ebe-4292-8ef1-22508c0ce927",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should break words at lower to upper case transitions",
      "fullTitle": "separateWords() should break words at lower to upper case transitions",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('firstTest')).to.deep.equal(['first', 'test']);",
      "err": {},
      "isRoot": false,
      "uuid": "106552b3-8b2d-4d52-8da7-dce0bca7377d",
      "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should break words and numbers apart",
      "fullTitle": "separateWords() should break words and numbers apart",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('test123test456Test')).to.deep.equal(['test', '123', 'test', '456', 'test']);",
      "err": {},
      "isRoot": false,
      "uuid": "9a943e27-1007-4a6c-9b42-7f6240b165dd",
      "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should recognize all separators and multiples of each",
      "fullTitle": "separateWords() should recognize all separators and multiples of each",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('this-is____just |||a.test:yo')).to.deep.equal(testString);",
      "err": {},
      "isRoot": false,
      "uuid": "3c4dab75-0243-4ea5-b9d1-587dd4a35026",
      "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should strip unknown characters as separators",
      "fullTitle": "separateWords() should strip unknown characters as separators",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('this-is____just!!¶•¶•a.test:yo')).to.deep.equal(testString);",
      "err": {},
      "isRoot": false,
      "uuid": "90790850-5bc7-45da-a668-09f2cb8868be",
      "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should properly output capitalization and add separators",
      "fullTitle": "handleCapsAndJoin() should properly output capitalization and add separators",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, ' ', CaseChange_1.CaseChange.To.upper)).to.equal('THIS IS JUST A TEST YO');\nchai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, '', CaseChange_1.CaseChange.To.title)).to.equal('ThisIsJustATestYo');\nchai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, ' booga ', CaseChange_1.CaseChange.To.title)).to.equal('This booga Is booga Just booga A booga Test booga Yo');",
      "err": {},
      "isRoot": false,
      "uuid": "c4c5f40c-e3c6-4122-90b5-a4cc42991228",
      "parentUUID": "3f9728b2-9d8a-42e4-9692-6630ed89d36b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only return a value for strings",
      "fullTitle": "validateIdentifier() should only return a value for strings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(_1.Path.validateIdentifier(3)).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier({})).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier(['identifier'])).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier(true)).to.equal(undefined);",
      "err": {},
      "isRoot": false,
      "uuid": "355a69a7-4d27-4673-bc13-7b9739879236",
      "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns a valid string",
      "fullTitle": "validateIdentifier() returns a valid string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(_1.Path.validateIdentifier(':A-Valid_Identifier0123'))\n    .to.equal(':A-Valid_Identifier0123');\nchai_1.expect(_1.Path.validateIdentifier('A-Valid_Identifier0123'))\n    .to.equal('A-Valid_Identifier0123');",
      "err": {},
      "isRoot": false,
      "uuid": "c8fe9752-308e-45df-a5a3-0331ad8a1898",
      "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "return an error for invalid strings",
      "fullTitle": "validateIdentifier() return an error for invalid strings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(_1.Path.validateIdentifier('&34')).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "10640a45-e357-49df-a0c0-e8a522024ef1",
      "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the root identifier",
      "fullTitle": "recognizes strings should return the root identifier",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(_1.Path.validateSegment('~')).to.equal('~');",
      "err": {},
      "isRoot": false,
      "uuid": "b2dd536f-3a17-4035-8511-4d0a57adae75",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should capture valid string identifiers",
      "fullTitle": "recognizes strings should capture valid string identifiers",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "seg = 'users';\nSEG = 'users';\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "88a64cf7-b663-46f3-97f8-a993fbb7cf4b",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should ignore preceding and trailing slashes",
      "fullTitle": "recognizes strings should ignore preceding and trailing slashes",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "seg = '/users/';\nSEG = 'users';\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "c60904d9-17d7-4bd4-9ca3-0d440bd1310c",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should recognize star parameters",
      "fullTitle": "recognizes strings should recognize star parameters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "seg = ':users';\nSEG = [':users', null];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "004e34a7-c2e2-4377-a23f-96489bcf38a3",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should recognize parameters with values",
      "fullTitle": "recognizes strings should recognize parameters with values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "seg = 'users=mkeil';\nSEG = [':users', 'mkeil'];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);\nseg = '/:users=mkeil/';\nSEG = [':users', 'mkeil'];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "837a7f13-bbc7-4ac1-9e1b-e3b5a05c8d23",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "only takes arrays with two items",
      "fullTitle": "recognizes parameters only takes arrays with two items",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let SEG = [':users', null];\nlet seg = [':users', null];\nchai_1.expect(_1.Path.validateSegment(seg)).to.deep.equal(SEG);\nseg = [':users', null, 'booga'];\nchai_1.expect(_1.Path.validateSegment(seg)).to.equal(undefined);\nseg = [':users'];\nchai_1.expect(_1.Path.validateSegment(seg)).to.equal(undefined);",
      "err": {},
      "isRoot": false,
      "uuid": "16732ff5-df11-48ec-af29-cd96ceffe36a",
      "parentUUID": "4377987d-7f67-4511-b99f-72c0c79fb023",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows for string, null and undefined as param values",
      "fullTitle": "recognizes parameters allows for string, null and undefined as param values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let seg = [':users', null];\nlet SEG = [':users', null];\nchai_1.expect(seg).to.deep.equal(SEG);\nseg = [':users', undefined];\nSEG = [':users', undefined];\nchai_1.expect(seg).to.deep.equal(SEG);\nseg = [':users', 'string'];\nSEG = [':users', 'string'];\nchai_1.expect(seg).to.deep.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "98603286-b721-4507-b32b-38c5108f81d5",
      "parentUUID": "4377987d-7f67-4511-b99f-72c0c79fb023",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should recognize the root indicator",
      "fullTitle": "validate should recognize the root indicator",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(results).to.deep.equal(PATH);",
      "err": {},
      "isRoot": false,
      "uuid": "9bd9dc8c-e25d-41fb-8197-d1b90a72feff",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only allow the root indicator to be first",
      "fullTitle": "validate should only allow the root indicator to be first",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = ['booga', '~', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "c590477a-fdf8-4bdb-a916-fd70d904762f",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should split segmented strings properly",
      "fullTitle": "validate should split segmented strings properly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = '~/booga/boo';\nPATH = ['~', 'booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga/boo';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga/boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga//boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;\npath = 'booga/boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);",
      "err": {},
      "isRoot": false,
      "uuid": "501d5995-e8db-4754-b129-54926d4e72e8",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return undefined if no valid segments are found",
      "fullTitle": "validate should return undefined if no valid segments are found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = ['bo#oga&\"', '#?boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.equal(undefined);",
      "err": {},
      "isRoot": false,
      "uuid": "61be675f-9630-42d5-a2fb-d71be5672abd",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only throw if a valid segment is found as well",
      "fullTitle": "validate should only throw if a valid segment is found as well",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = ['valid1', 'bo#oga&\"', '#?boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "cae06ebc-7758-4b24-a1e7-58ac00c6e3f9",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only throw if a valid segment is found as well",
      "fullTitle": "validate should only throw if a valid segment is found as well",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = ['bo#oga&\"', { invalid: 'bummer' }, 'valid2'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.be.instanceof(_1.PathError);",
      "err": {},
      "isRoot": false,
      "uuid": "04620d89-dbcc-4e87-9df9-ae80f920e438",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the last segment of the Path",
      "fullTitle": "path.last should return the last segment of the Path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(path.last).to.deep.equal([':boo', null]);",
      "err": {},
      "isRoot": false,
      "uuid": "4fa7acb2-059c-4a28-8577-fd6f7e690991",
      "parentUUID": "59022e37-b548-4c06-ab72-00f5a45b0783",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be able to be set to a valid segment",
      "fullTitle": "path.last should only be able to be set to a valid segment",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let good = 'good';\nlet bad = ['bad', { segment: true }];\nchai_1.expect(path.last = good).to.equal(good);\nchai_1.expect(path.last = bad).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "201d7cb4-5087-4acc-a12c-8af46e89a903",
      "parentUUID": "59022e37-b548-4c06-ab72-00f5a45b0783",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the last identifier of the Path",
      "fullTitle": "path.identifier should return the last identifier of the Path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(path.identifier).to.equal(':boo');",
      "err": {},
      "isRoot": false,
      "uuid": "888bc8cd-1e1f-46c3-9809-98ce0b1e243f",
      "parentUUID": "af4ad610-640f-44e3-8058-5673aeb9d7df",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be able to be set to a valid identifier",
      "fullTitle": "path.identifier should only be able to be set to a valid identifier",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let good = 'good';\nlet bad = { booga: 'boo' };\nchai_1.expect(path.identifier = good).to.equal(good);\nchai_1.expect(path.identifier = bad).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "f317ca4e-5984-45ac-8c66-d63fe0d2ab04",
      "parentUUID": "af4ad610-640f-44e3-8058-5673aeb9d7df",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the last value of the Path",
      "fullTitle": "path.value should return the last value of the Path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(path.value).to.equal('shakalaka');",
      "err": {},
      "isRoot": false,
      "uuid": "4a81db9c-c1dc-42e5-8488-4a79a3d4868d",
      "parentUUID": "22a61df8-00a0-4b34-b641-317c2ec280d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be able to be set to a valid value",
      "fullTitle": "path.value should only be able to be set to a valid value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let good = 'shaboom';\nlet bad = { booga: 'boo' };\nchai_1.expect(path.value = good).to.equal(good);\nchai_1.expect(path.value = bad).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "78279a20-1964-4039-94ed-9065626b623d",
      "parentUUID": "22a61df8-00a0-4b34-b641-317c2ec280d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be true if from root",
      "fullTitle": "path.isFromRoot should only be true if from root",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(path.isFromRoot).to.be.true;\npath = new _1.Path(['booga', [':boom', 'shakalaka']]);\nchai_1.expect(path.isFromRoot).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "0f5e4b23-209f-4a53-ae4e-4ea8eaa56963",
      "parentUUID": "9ea982ac-4049-40a0-a0c9-200ca9f091b8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be able to match valid paths",
      "fullTitle": "path.isHere() should only be able to match valid paths",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let bad = '~/Bad~Bad/path';\n// console.log(Path.match(bad, path)[1]);\n// expect((<Error>Path.match(bad, path)[1]).message).to.deep.equal(['path is invalid']);\n// expect((<Error>Path.match(bad, path)[1])).to.throw(Error)\n// \t.which.has.property('message', 'path is invalid');\n// result = [['no'], new PathError('here is invalid')];\n// expect((<Error>Path.match(path, bad)[1]).message).to.equal('here is invalid');",
      "err": {},
      "isRoot": false,
      "uuid": "8bdbdc83-34d0-4751-9324-4d45ffc07c72",
      "parentUUID": "79eaf9ff-91f5-4169-abc7-be8f0615a95a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should match routes along similar paths",
      "fullTitle": "path.isHere() should match routes along similar paths",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let good = [['yes', 'yes', 'yes'], path];\nlet bad = [['yes', 'no']];\nchai_1.expect(_1.Path.match(path, isHere)).to.deep.equal(good);\n// expect(Path.match(path, notHere)[1]).to.throw(PathError, /path not along this path/);",
      "err": {},
      "isRoot": false,
      "uuid": "e70dfba6-5119-485a-b2bb-4472e1fef2eb",
      "parentUUID": "79eaf9ff-91f5-4169-abc7-be8f0615a95a",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should break words at lower to upper case transitions",
      "fullTitle": "separateWords() should break words at lower to upper case transitions",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('firstTest')).to.deep.equal(['first', 'test']);",
      "err": {},
      "isRoot": false,
      "uuid": "106552b3-8b2d-4d52-8da7-dce0bca7377d",
      "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should break words and numbers apart",
      "fullTitle": "separateWords() should break words and numbers apart",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('test123test456Test')).to.deep.equal(['test', '123', 'test', '456', 'test']);",
      "err": {},
      "isRoot": false,
      "uuid": "9a943e27-1007-4a6c-9b42-7f6240b165dd",
      "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should recognize all separators and multiples of each",
      "fullTitle": "separateWords() should recognize all separators and multiples of each",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('this-is____just |||a.test:yo')).to.deep.equal(testString);",
      "err": {},
      "isRoot": false,
      "uuid": "3c4dab75-0243-4ea5-b9d1-587dd4a35026",
      "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should strip unknown characters as separators",
      "fullTitle": "separateWords() should strip unknown characters as separators",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.separateWords('this-is____just!!¶•¶•a.test:yo')).to.deep.equal(testString);",
      "err": {},
      "isRoot": false,
      "uuid": "90790850-5bc7-45da-a668-09f2cb8868be",
      "parentUUID": "1474b3bb-f4aa-41dc-96fd-69fb79b9e999",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should properly output capitalization and add separators",
      "fullTitle": "handleCapsAndJoin() should properly output capitalization and add separators",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, ' ', CaseChange_1.CaseChange.To.upper)).to.equal('THIS IS JUST A TEST YO');\nchai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, '', CaseChange_1.CaseChange.To.title)).to.equal('ThisIsJustATestYo');\nchai_1.expect(CaseChange_1.CaseChange.handleCapsAndJoin(testString, ' booga ', CaseChange_1.CaseChange.To.title)).to.equal('This booga Is booga Just booga A booga Test booga Yo');",
      "err": {},
      "isRoot": false,
      "uuid": "c4c5f40c-e3c6-4122-90b5-a4cc42991228",
      "parentUUID": "3f9728b2-9d8a-42e4-9692-6630ed89d36b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only return a value for strings",
      "fullTitle": "validateIdentifier() should only return a value for strings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(_1.Path.validateIdentifier(3)).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier({})).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier(['identifier'])).to.equal(undefined);\nchai_1.expect(_1.Path.validateIdentifier(true)).to.equal(undefined);",
      "err": {},
      "isRoot": false,
      "uuid": "355a69a7-4d27-4673-bc13-7b9739879236",
      "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns a valid string",
      "fullTitle": "validateIdentifier() returns a valid string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(_1.Path.validateIdentifier(':A-Valid_Identifier0123'))\n    .to.equal(':A-Valid_Identifier0123');\nchai_1.expect(_1.Path.validateIdentifier('A-Valid_Identifier0123'))\n    .to.equal('A-Valid_Identifier0123');",
      "err": {},
      "isRoot": false,
      "uuid": "c8fe9752-308e-45df-a5a3-0331ad8a1898",
      "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "return an error for invalid strings",
      "fullTitle": "validateIdentifier() return an error for invalid strings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(_1.Path.validateIdentifier('&34')).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "10640a45-e357-49df-a0c0-e8a522024ef1",
      "parentUUID": "55864f0b-abd9-4ea4-b01c-ba4df2fb3256",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the root identifier",
      "fullTitle": "recognizes strings should return the root identifier",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(_1.Path.validateSegment('~')).to.equal('~');",
      "err": {},
      "isRoot": false,
      "uuid": "b2dd536f-3a17-4035-8511-4d0a57adae75",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should capture valid string identifiers",
      "fullTitle": "recognizes strings should capture valid string identifiers",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "seg = 'users';\nSEG = 'users';\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "88a64cf7-b663-46f3-97f8-a993fbb7cf4b",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should ignore preceding and trailing slashes",
      "fullTitle": "recognizes strings should ignore preceding and trailing slashes",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "seg = '/users/';\nSEG = 'users';\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "c60904d9-17d7-4bd4-9ca3-0d440bd1310c",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should recognize star parameters",
      "fullTitle": "recognizes strings should recognize star parameters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "seg = ':users';\nSEG = [':users', null];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "004e34a7-c2e2-4377-a23f-96489bcf38a3",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should recognize parameters with values",
      "fullTitle": "recognizes strings should recognize parameters with values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "seg = 'users=mkeil';\nSEG = [':users', 'mkeil'];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);\nseg = '/:users=mkeil/';\nSEG = [':users', 'mkeil'];\nresults = _1.Path.validateSegment(seg);\nchai_1.expect(results).to.deep.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "837a7f13-bbc7-4ac1-9e1b-e3b5a05c8d23",
      "parentUUID": "f0066242-19ed-41ec-880e-22686d9d0ffd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "only takes arrays with two items",
      "fullTitle": "recognizes parameters only takes arrays with two items",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let SEG = [':users', null];\nlet seg = [':users', null];\nchai_1.expect(_1.Path.validateSegment(seg)).to.deep.equal(SEG);\nseg = [':users', null, 'booga'];\nchai_1.expect(_1.Path.validateSegment(seg)).to.equal(undefined);\nseg = [':users'];\nchai_1.expect(_1.Path.validateSegment(seg)).to.equal(undefined);",
      "err": {},
      "isRoot": false,
      "uuid": "16732ff5-df11-48ec-af29-cd96ceffe36a",
      "parentUUID": "4377987d-7f67-4511-b99f-72c0c79fb023",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows for string, null and undefined as param values",
      "fullTitle": "recognizes parameters allows for string, null and undefined as param values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let seg = [':users', null];\nlet SEG = [':users', null];\nchai_1.expect(seg).to.deep.equal(SEG);\nseg = [':users', undefined];\nSEG = [':users', undefined];\nchai_1.expect(seg).to.deep.equal(SEG);\nseg = [':users', 'string'];\nSEG = [':users', 'string'];\nchai_1.expect(seg).to.deep.equal(SEG);",
      "err": {},
      "isRoot": false,
      "uuid": "98603286-b721-4507-b32b-38c5108f81d5",
      "parentUUID": "4377987d-7f67-4511-b99f-72c0c79fb023",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should recognize the root indicator",
      "fullTitle": "validate should recognize the root indicator",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(results).to.deep.equal(PATH);",
      "err": {},
      "isRoot": false,
      "uuid": "9bd9dc8c-e25d-41fb-8197-d1b90a72feff",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only allow the root indicator to be first",
      "fullTitle": "validate should only allow the root indicator to be first",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = ['booga', '~', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "c590477a-fdf8-4bdb-a916-fd70d904762f",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should split segmented strings properly",
      "fullTitle": "validate should split segmented strings properly",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = '~/booga/boo';\nPATH = ['~', 'booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga/boo';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga/boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);\npath = '/booga//boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;\npath = 'booga/boo/';\nPATH = ['booga', 'boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.deep.equal(PATH);",
      "err": {},
      "isRoot": false,
      "uuid": "501d5995-e8db-4754-b129-54926d4e72e8",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return undefined if no valid segments are found",
      "fullTitle": "validate should return undefined if no valid segments are found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = ['bo#oga&\"', '#?boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.equal(undefined);",
      "err": {},
      "isRoot": false,
      "uuid": "61be675f-9630-42d5-a2fb-d71be5672abd",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only throw if a valid segment is found as well",
      "fullTitle": "validate should only throw if a valid segment is found as well",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = ['valid1', 'bo#oga&\"', '#?boo'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "cae06ebc-7758-4b24-a1e7-58ac00c6e3f9",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only throw if a valid segment is found as well",
      "fullTitle": "validate should only throw if a valid segment is found as well",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "path = ['bo#oga&\"', { invalid: 'bummer' }, 'valid2'];\nresults = _1.Path.validate(path);\nchai_1.expect(results).to.be.instanceof(_1.PathError);",
      "err": {},
      "isRoot": false,
      "uuid": "04620d89-dbcc-4e87-9df9-ae80f920e438",
      "parentUUID": "29024e2e-0a91-48c6-85ba-4df191d789fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the last segment of the Path",
      "fullTitle": "path.last should return the last segment of the Path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(path.last).to.deep.equal([':boo', null]);",
      "err": {},
      "isRoot": false,
      "uuid": "4fa7acb2-059c-4a28-8577-fd6f7e690991",
      "parentUUID": "59022e37-b548-4c06-ab72-00f5a45b0783",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be able to be set to a valid segment",
      "fullTitle": "path.last should only be able to be set to a valid segment",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let good = 'good';\nlet bad = ['bad', { segment: true }];\nchai_1.expect(path.last = good).to.equal(good);\nchai_1.expect(path.last = bad).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "201d7cb4-5087-4acc-a12c-8af46e89a903",
      "parentUUID": "59022e37-b548-4c06-ab72-00f5a45b0783",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the last identifier of the Path",
      "fullTitle": "path.identifier should return the last identifier of the Path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(path.identifier).to.equal(':boo');",
      "err": {},
      "isRoot": false,
      "uuid": "888bc8cd-1e1f-46c3-9809-98ce0b1e243f",
      "parentUUID": "af4ad610-640f-44e3-8058-5673aeb9d7df",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be able to be set to a valid identifier",
      "fullTitle": "path.identifier should only be able to be set to a valid identifier",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let good = 'good';\nlet bad = { booga: 'boo' };\nchai_1.expect(path.identifier = good).to.equal(good);\nchai_1.expect(path.identifier = bad).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "f317ca4e-5984-45ac-8c66-d63fe0d2ab04",
      "parentUUID": "af4ad610-640f-44e3-8058-5673aeb9d7df",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the last value of the Path",
      "fullTitle": "path.value should return the last value of the Path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(path.value).to.equal('shakalaka');",
      "err": {},
      "isRoot": false,
      "uuid": "4a81db9c-c1dc-42e5-8488-4a79a3d4868d",
      "parentUUID": "22a61df8-00a0-4b34-b641-317c2ec280d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be able to be set to a valid value",
      "fullTitle": "path.value should only be able to be set to a valid value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let good = 'shaboom';\nlet bad = { booga: 'boo' };\nchai_1.expect(path.value = good).to.equal(good);\nchai_1.expect(path.value = bad).to.throw;",
      "err": {},
      "isRoot": false,
      "uuid": "78279a20-1964-4039-94ed-9065626b623d",
      "parentUUID": "22a61df8-00a0-4b34-b641-317c2ec280d1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be true if from root",
      "fullTitle": "path.isFromRoot should only be true if from root",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(path.isFromRoot).to.be.true;\npath = new _1.Path(['booga', [':boom', 'shakalaka']]);\nchai_1.expect(path.isFromRoot).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "0f5e4b23-209f-4a53-ae4e-4ea8eaa56963",
      "parentUUID": "9ea982ac-4049-40a0-a0c9-200ca9f091b8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only be able to match valid paths",
      "fullTitle": "path.isHere() should only be able to match valid paths",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let bad = '~/Bad~Bad/path';\n// console.log(Path.match(bad, path)[1]);\n// expect((<Error>Path.match(bad, path)[1]).message).to.deep.equal(['path is invalid']);\n// expect((<Error>Path.match(bad, path)[1])).to.throw(Error)\n// \t.which.has.property('message', 'path is invalid');\n// result = [['no'], new PathError('here is invalid')];\n// expect((<Error>Path.match(path, bad)[1]).message).to.equal('here is invalid');",
      "err": {},
      "isRoot": false,
      "uuid": "8bdbdc83-34d0-4751-9324-4d45ffc07c72",
      "parentUUID": "79eaf9ff-91f5-4169-abc7-be8f0615a95a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should match routes along similar paths",
      "fullTitle": "path.isHere() should match routes along similar paths",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let good = [['yes', 'yes', 'yes'], path];\nlet bad = [['yes', 'no']];\nchai_1.expect(_1.Path.match(path, isHere)).to.deep.equal(good);\n// expect(Path.match(path, notHere)[1]).to.throw(PathError, /path not along this path/);",
      "err": {},
      "isRoot": false,
      "uuid": "e70dfba6-5119-485a-b2bb-4472e1fef2eb",
      "parentUUID": "79eaf9ff-91f5-4169-abc7-be8f0615a95a",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}