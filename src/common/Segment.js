"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const _1 = require("./");
class Segment extends Array {
    constructor(arg) {
        super();
        this._update = (arg, id) => {
            let results = id
                ? Segment.validateId(arg)
                : Segment.validateValue(arg);
            if (results instanceof Error)
                throw results;
            id
                ? this[0] = results
                : this[1] = results;
        };
        this.match = (path) => Segment.match(path, this);
        let results = Segment.validate(arg);
        if (!results || util_1.isError(results))
            throw results || new _1.PathError('cannot build an invalid segment', arg);
        [this[0], this[1]] = results;
    }
    get id() {
        return this[0];
    }
    ;
    set id(arg) {
        this._update(arg, true);
        if (this[0].startsWith(':') && util_1.isNull(this[1]))
            this[1] = undefined;
        if (!this[0].startsWith(':') && !util_1.isNull(this[1]))
            this[1] = null;
    }
    ;
    get val() {
        return this[1];
    }
    ;
    set val(arg) {
        this._update(arg, false);
        if (util_1.isNull(this[1]) && this[0].startsWith(':'))
            this[0] = this[0].substr(1);
        if (!util_1.isNull(this[1]) && !this[0].startsWith(':'))
            this[0] = `:${this[0]}`;
    }
    ;
    get isParam() {
        return !util_1.isNull(this[1]);
    }
    ;
}
Segment.ValidIdentifier = /^~|(?:\/?:?([-\w]+))$/;
Segment.ValidValue = /=?([^\/]*)\/?$/;
Segment.ValidSegment = /^(~)|(?:\/?(:?)([-\w]+)(?:=([^\/]*))?\/?)$/;
Segment.validateId = (arg) => {
    let id;
    if (util_1.isString(arg))
        return (id = Segment.ValidIdentifier.exec(arg))
            ? id[1]
            : new _1.PathError('invalid identifier string', arg);
    return new _1.PathError('invalid segment identifier type', arg);
};
Segment.validateValue = (arg) => {
    if (util_1.isUndefined(arg) || util_1.isNull(arg))
        return arg;
    if (util_1.isString(arg)) {
        let results = Segment.ValidValue.exec(arg);
        if (util_1.isNull(results))
            return new _1.PathError('invalid segment value string', arg);
        let value = results[1];
        switch (value) {
            case '':
            case 'undef':
            case 'undefined':
                return undefined;
            case 'null':
                return null;
            default:
                return value;
        }
    }
    return new _1.PathError('value must be a valid string, null or undefined', arg);
};
Segment.validate = (arg) => {
    if (arg instanceof Segment)
        return [arg[0], arg[1]];
    if (util_1.isString(arg)) {
        let results = Segment.ValidSegment.exec(arg);
        if (results === null)
            return undefined;
        let [param, identifier, value] = results.slice(1);
        if (param === '~')
            return ['~', null];
        let val = null;
        if (value)
            val = Segment.validateValue(value);
        else if (param === ':')
            val = '*';
        return util_1.isError(val)
            ? val
            : [param.concat(identifier), val];
    }
    if (util_1.isArray(arg) && (arg.length === 2)) {
        let id = Segment.validateId(arg[0]);
        let val = Segment.validateValue(arg[1]);
        if (!util_1.isError(id)) {
            if (util_1.isError(val))
                return val;
            if (id.startsWith(':') && util_1.isNull(val))
                return new _1.PathError('parameter values cannot be null');
            if (!id.startsWith(':') && !util_1.isNull(val))
                return new _1.PathError('route values must be null');
            return [id, val];
        }
        return undefined;
    }
    return undefined;
};
Segment.match = (path, here) => {
    let results = Segment.validate(path);
    if (util_1.isError(results))
        return new _1.PathError('path is invalid', path);
    results = Segment.validate(here);
    if (util_1.isError(results))
        return new _1.PathError('here is invalid', here);
    if (path === here)
        return 'yes';
    if (util_1.isNull(path[1])) {
        // matches value param at end of here or a star handler that came in as a value
        if (here[1] === '*' || util_1.isUndefined(here[1]))
            return 'maybe';
        // matches value param mid-path
        if (path[0] === here[1])
            return 'value';
    }
    return 'no';
};
exports.Segment = Segment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VnbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNlZ21lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFNYztBQUVkLHlCQUd3QjtBQVV4QixhQUFxQixTQUFRLEtBQXlCO0lBcUpyRCxZQUFZLEdBQVE7UUFDbkIsS0FBSyxFQUFFLENBQUM7UUEzQ0QsWUFBTyxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQVc7WUFFdkMsSUFBSSxPQUFPLEdBQUcsRUFBRTtrQkFDYixPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztrQkFDdkIsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUU5QixFQUFFLENBQUMsQ0FBQyxPQUFPLFlBQVksS0FBSyxDQUFDO2dCQUM1QixNQUFNLE9BQU8sQ0FBQztZQUVmLEVBQUU7a0JBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFlLE9BQU87a0JBQzdCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBVSxPQUFPLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBd0NLLFVBQUssR0FBRyxDQUFDLElBQXNCLEtBQUssT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFQcEUsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVwQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFBQyxNQUFNLE9BQU8sSUFBSSxJQUFJLFlBQVMsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV6RyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDOUIsQ0FBQztJQWhDRCxJQUFJLEVBQUU7UUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hCLENBQUM7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