"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const _1 = require("./");
class Segment extends Array {
    constructor(arg) {
        super();
        this._update = (arg, id) => {
            let results = id
                ? Segment.validId(arg)
                : Segment.validValue(arg);
            if (results instanceof Error)
                throw results;
            id
                ? this[0] = results
                : this[1] = results;
        };
        this.is = (here) => {
            let result = Segment.match(this, here);
            return util_1.isError(result)
                ? 'no'
                : result;
        };
        let results = Segment.valid(arg);
        if (!results || util_1.isError(results))
            throw results || new _1.PathError('cannot build an invalid segment', arg);
        [this[0], this[1]] = results;
    }
    get id() {
        return this[0];
    }
    ;
    set id(arg) {
        this._update(arg, true);
        if (this[0].startsWith(':') && util_1.isNull(this[1]))
            this[1] = undefined;
        if (!this[0].startsWith(':') && !util_1.isNull(this[1]))
            this[1] = null;
    }
    ;
    get val() {
        return this[1];
    }
    ;
    set val(arg) {
        this._update(arg, false);
        if (util_1.isNull(this[1]) && this[0].startsWith(':'))
            this[0] = this[0].substr(1);
        if (!util_1.isNull(this[1]) && !this[0].startsWith(':'))
            this[0] = `:${this[0]}`;
    }
    ;
    get isParam() {
        return !util_1.isNull(this[1]);
    }
    ;
}
Segment.ValidIdentifier = /^~|(?:\/?:?([-\w]+))$/;
Segment.ValidValue = /=?([^\/]*)\/?$/;
Segment.ValidSegment = /^(~)|(?:\/?(:?)([-\w]+)(?:=([^\/]*))?\/?)$/;
Segment.validId = (arg) => {
    let id;
    if (util_1.isString(arg))
        return (id = Segment.ValidIdentifier.exec(arg))
            ? id[1]
            : new _1.PathError('invalid identifier string', arg);
    return new _1.PathError('invalid segment identifier type', arg);
};
Segment.validValue = (arg) => {
    if (util_1.isUndefined(arg) || util_1.isNull(arg))
        return arg;
    if (util_1.isString(arg)) {
        let results = Segment.ValidValue.exec(arg);
        if (util_1.isNull(results))
            return new _1.PathError('invalid segment value string', arg);
        let value = results[1];
        switch (value) {
            case '':
            case 'undef':
            case 'undefined':
                return undefined;
            case 'null':
                return null;
            default:
                return value;
        }
    }
    return new _1.PathError('value must be a valid string, null or undefined', arg);
};
Segment.valid = (arg) => {
    if (arg instanceof Segment)
        return [arg[0], arg[1]];
    if (util_1.isString(arg)) {
        let results = Segment.ValidSegment.exec(arg);
        if (results === null)
            return undefined;
        let [param, identifier, value] = results.slice(1);
        if (param === '~')
            return ['~', null];
        let val = null;
        if (value)
            val = Segment.validValue(value);
        else if (param === ':')
            val = '*';
        return util_1.isError(val)
            ? val
            : [param.concat(identifier), val];
    }
    if (util_1.isArray(arg) && (arg.length === 2)) {
        let id = Segment.validId(arg[0]);
        let val = Segment.validValue(arg[1]);
        if (!util_1.isError(id)) {
            if (util_1.isError(val))
                return val;
            if (id.startsWith(':') && util_1.isNull(val))
                return new _1.PathError('parameter values cannot be null');
            if (!id.startsWith(':') && !util_1.isNull(val))
                return new _1.PathError('route values must be null');
            return [id, val];
        }
        return undefined;
    }
    return undefined;
};
Segment.match = (path, here) => {
    let results = Segment.valid(path);
    if (util_1.isError(results))
        return new _1.PathError('path is invalid', path);
    results = Segment.valid(here);
    if (util_1.isError(results))
        return new _1.PathError('here is invalid', here);
    if (path === here)
        return 'yes';
    if (util_1.isNull(path[1])) {
        // matches value param at end of here or a star handler that came in as a value
        if (here[1] === '*' || util_1.isUndefined(here[1]))
            return 'maybe';
        // matches value param mid-path
        if (path[0] === here[1])
            return 'value';
    }
    return 'no';
};
exports.Segment = Segment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VnbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNlZ21lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFNYztBQUVkLHlCQUE2QjtBQVE3QixhQUFxQixTQUFRLEtBQXlCO0lBcUpyRCxZQUFZLEdBQVE7UUFDbkIsS0FBSyxFQUFFLENBQUM7UUEzQ0QsWUFBTyxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQVc7WUFFdkMsSUFBSSxPQUFPLEdBQUcsRUFBRTtrQkFDYixPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztrQkFDcEIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUUzQixFQUFFLENBQUMsQ0FBQyxPQUFPLFlBQVksS0FBSyxDQUFDO2dCQUM1QixNQUFNLE9BQU8sQ0FBQztZQUVmLEVBQUU7a0JBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFlLE9BQU87a0JBQzdCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBVSxPQUFPLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBd0NLLE9BQUUsR0FBRyxDQUFDLElBQXNCO1lBQ2xDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxjQUFPLENBQUMsTUFBTSxDQUFDO2tCQUNuQixJQUFJO2tCQUNKLE1BQU0sQ0FBQztRQUNYLENBQUMsQ0FBQztRQVpELElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksY0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQUMsTUFBTSxPQUFPLElBQUksSUFBSSxZQUFTLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFekcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFD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