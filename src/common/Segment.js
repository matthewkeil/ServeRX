"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const Errors_1 = require("./Errors");
class Segment extends Array {
    constructor(arg) {
        super();
        this._update = (arg, id) => {
            let results = id
                ? Segment.validId(arg)
                : Segment.validValue(arg);
            if (results instanceof Error)
                throw results;
            id
                ? this[0] = results
                : this[1] = results;
        };
        this.is = (here) => {
            let result = Segment.match(this, here);
            return util_1.isError(result)
                ? 'no'
                : result;
        };
        let results = Segment.valid(arguments.length > 1
            ? [...arguments]
            : arguments[0]);
        if (!results || util_1.isError(results))
            throw results || new Errors_1.PathError('cannot build an invalid segment', arg);
        [this[0], this[1]] = results;
    }
    get id() {
        return this[0];
    }
    ;
    set id(arg) {
        this._update(arg, true);
        if (this[0].startsWith(':') && util_1.isNull(this[1]))
            this[1] = undefined;
        if (!this[0].startsWith(':') && !util_1.isNull(this[1]))
            this[1] = null;
    }
    ;
    get val() {
        return this[1];
    }
    ;
    set val(arg) {
        this._update(arg, false);
        if (util_1.isNull(this[1]) && this[0].startsWith(':'))
            this[0] = this[0].substr(1);
        if (!util_1.isNull(this[1]) && !this[0].startsWith(':'))
            this[0] = `:${this[0]}`;
    }
    ;
    get isParam() {
        return !util_1.isNull(this[1]);
    }
    ;
}
Segment.ValidIdentifier = /^(~)|(?:\/?(:?[-\w]+)=?)/;
Segment.ValidValue = /^(?:\/?:?[-\w]+=)?([^\/]*)\/?/;
Segment.ValidSegment = /^(~)|^(?:\/?(:)?([-\w]+)(?:(=)([^\/]*))?)\/?$/;
Segment.validId = (arg) => {
    let id;
    if (util_1.isString(arg)) {
        return (id = Segment.ValidIdentifier.exec(arg))
            ? id[1]
                ? id[1]
                : id[2]
            : new Errors_1.PathError('invalid identifier string', arg);
    }
    return new Errors_1.PathError('invalid segment identifier type', arg);
};
Segment.validValue = (arg) => {
    if (util_1.isUndefined(arg) || util_1.isNull(arg))
        return arg;
    if (util_1.isString(arg)) {
        let results = Segment.ValidValue.exec(arg);
        if (util_1.isNull(results))
            return new Errors_1.PathError('invalid segment value string', arg);
        let value = results[1];
        switch (value) {
            case '':
            case 'undef':
            case 'undefined':
                return undefined;
            case 'null':
                return null;
            default:
                return value;
        }
    }
    return new Errors_1.PathError('value must be a valid string, null or undefined', arg);
};
Segment.valid = (arg) => {
    if (arg instanceof Segment)
        return [arg[0], arg[1]];
    if (util_1.isString(arg)) {
        let results = Segment.ValidSegment.exec(arg);
        if (results === null)
            return undefined;
        let [root, param, id, eq, value] = results.slice(1);
        if (root)
            return (param || id || eq || value)
                ? new Errors_1.PathError('root segment cannot have an id or value')
                : ['~', null];
        let val = eq
            ? Segment.validValue(value)
            : null;
        if (param && util_1.isNull(val))
            val = '*';
        return util_1.isError(val)
            ? val
            : [param || eq
                    ? ':'.concat(id)
                    : id,
                val];
    }
    if (util_1.isArray(arg) && (arg.length === 2)) {
        let id = Segment.validId(arg[0]);
        if (util_1.isError(id))
            return undefined;
        let val = Segment.validValue(arg[1]);
        if (util_1.isError(val))
            return val;
        if (id.startsWith(':') && util_1.isNull(val))
            return new Errors_1.PathError('parameter values cannot be null');
        if (!id.startsWith(':') && !util_1.isNull(val))
            return new Errors_1.PathError('route values must be null');
        return [id, val];
    }
    return undefined;
};
Segment.match = (path, here) => {
    let results = Segment.valid(path);
    if (!results || util_1.isError(results))
        return results || new Errors_1.PathError('path is invalid', path);
    let _path = results;
    results = Segment.valid(here);
    if (!results || util_1.isError(results))
        return results || new Errors_1.PathError('here is invalid', here);
    let _here = results;
    if (_path[0] === _here[0] && (_path[1] === _here[1]))
        return 'yes';
    if (util_1.isNull(_path[1])) {
        // matches value param at end of _here or a star handler that came in as a value
        if (_here[1] === '*' || util_1.isUndefined(_here[1]))
            return 'maybe';
        // matches value param mid-_path
        if (_path[0] === _here[1])
            return 'value';
    }
    return 'no';
};
exports.Segment = Segment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VnbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNlZ21lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFNYztBQUVkLHFDQUFtQztBQVNuQyxhQUFxQixTQUFRLEtBQXlCO0lBMkpyRCxZQUFZLEdBQVE7UUFDbkIsS0FBSyxFQUFFLENBQUM7UUEzQ0QsWUFBTyxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQVc7WUFFdkMsSUFBSSxPQUFPLEdBQUcsRUFBRTtrQkFDYixPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztrQkFDcEIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUUzQixFQUFFLENBQUMsQ0FBQyxPQUFPLFlBQVksS0FBSyxDQUFDO2dCQUM1QixNQUFNLE9BQU8sQ0FBQztZQUVmLEVBQUU7a0JBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFlLE9BQU87a0JBQzdCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBVSxPQUFPLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBMkNLLE9BQUUsR0FBRyxDQUFDLElBQXNCO1lBQ2xDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxjQUFPLENBQUMsTUFBTSxDQUFDO2tCQUNuQixJQUFJO2tCQUNKLE1BQU0sQ0FBQztRQUNYLENBQUMsQ0FBQztRQWZELElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQzFCLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztjQUNqQixDQUFDLEdBQUcsU0FBUyxDQUFDO2NBQ2QsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksY0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQUMsTUFBTSxPQUFPLElBQUksSUFBSSxrQkFBUyxDQUFDLGlDQUFpQyxFQUFFLEdB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