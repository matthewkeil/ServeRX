"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const Errors_1 = require("./Errors");
class Segment extends Array {
    constructor(arg) {
        super();
        this._update = (arg, id) => {
            let results = id
                ? Segment.validId(arg)
                : Segment.validValue(arg);
            if (results instanceof Error)
                throw results;
            id
                ? this[0] = results
                : this[1] = results;
        };
        this.is = (here) => {
            let result = Segment.match(this, here);
            return util_1.isError(result)
                ? 'no'
                : result;
        };
        let results = Segment.valid(arg);
        if (!results || util_1.isError(results))
            throw results || new Errors_1.PathError('cannot build an invalid segment', arg);
        [this[0], this[1]] = results;
    }
    get id() {
        return this[0];
    }
    ;
    set id(arg) {
        this._update(arg, true);
        if (this[0].startsWith(':') && util_1.isNull(this[1]))
            this[1] = undefined;
        if (!this[0].startsWith(':') && !util_1.isNull(this[1]))
            this[1] = null;
    }
    ;
    get val() {
        return this[1];
    }
    ;
    set val(arg) {
        this._update(arg, false);
        if (util_1.isNull(this[1]) && this[0].startsWith(':'))
            this[0] = this[0].substr(1);
        if (!util_1.isNull(this[1]) && !this[0].startsWith(':'))
            this[0] = `:${this[0]}`;
    }
    ;
    get isParam() {
        return !util_1.isNull(this[1]);
    }
    ;
}
Segment.ValidIdentifier = /^(~)|(?:\/?:?([-\w]+)=?)/;
Segment.ValidValue = /^(?:\/?:?[-\w]+=)?([^\/]*)\/?/;
Segment.ValidSegment = /^(~)|^(?:\/?(:?)([-\w]+)(?:(=)([^\/]*))?)\/?$/;
Segment.validId = (arg) => {
    let id;
    if (util_1.isString(arg))
        return (id = Segment.ValidIdentifier.exec(arg))
            ? id[3]
            : new Errors_1.PathError('invalid identifier string', arg);
    return new Errors_1.PathError('invalid segment identifier type', arg);
};
Segment.validValue = (arg) => {
    if (util_1.isUndefined(arg) || util_1.isNull(arg))
        return arg;
    if (util_1.isString(arg)) {
        let results = Segment.ValidValue.exec(arg);
        if (util_1.isNull(results))
            return new Errors_1.PathError('invalid segment value string', arg);
        let value = results[1];
        switch (value) {
            case '':
            case 'undef':
            case 'undefined':
                return undefined;
            case 'null':
                return null;
            default:
                return value;
        }
    }
    return new Errors_1.PathError('value must be a valid string, null or undefined', arg);
};
Segment.valid = (arg) => {
    if (arg instanceof Segment)
        return [arg[0], arg[1]];
    if (util_1.isString(arg)) {
        let results = Segment.ValidSegment.exec(arg);
        if (results === null)
            return undefined;
        let [param, identifier, value] = results.slice(1);
        if (param === '~')
            return ['~', null];
        let val = null;
        if (value)
            val = Segment.validValue(value);
        else if (param === ':')
            val = '*';
        return util_1.isError(val)
            ? val
            : [param.concat(identifier), val];
    }
    if (util_1.isArray(arg) && (arg.length === 2)) {
        let id = Segment.validId(arg[0]);
        let val = Segment.validValue(arg[1]);
        if (!util_1.isError(id)) {
            if (util_1.isError(val))
                return val;
            if (id.startsWith(':') && util_1.isNull(val))
                return new Errors_1.PathError('parameter values cannot be null');
            if (!id.startsWith(':') && !util_1.isNull(val))
                return new Errors_1.PathError('route values must be null');
            return [id, val];
        }
        return undefined;
    }
    return undefined;
};
Segment.match = (path, here) => {
    let results = Segment.valid(path);
    if (util_1.isError(results))
        return new Errors_1.PathError('path is invalid', path);
    results = Segment.valid(here);
    if (util_1.isError(results))
        return new Errors_1.PathError('here is invalid', here);
    if (path === here)
        return 'yes';
    if (util_1.isNull(path[1])) {
        // matches value param at end of here or a star handler that came in as a value
        if (here[1] === '*' || util_1.isUndefined(here[1]))
            return 'maybe';
        // matches value param mid-path
        if (path[0] === here[1])
            return 'value';
    }
    return 'no';
};
exports.Segment = Segment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VnbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNlZ21lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFNYztBQUVkLHFDQUFtQztBQVNuQyxhQUFxQixTQUFRLEtBQXlCO0lBcUpyRCxZQUFZLEdBQVE7UUFDbkIsS0FBSyxFQUFFLENBQUM7UUEzQ0QsWUFBTyxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQVc7WUFFdkMsSUFBSSxPQUFPLEdBQUcsRUFBRTtrQkFDYixPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztrQkFDcEIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUUzQixFQUFFLENBQUMsQ0FBQyxPQUFPLFlBQVksS0FBSyxDQUFDO2dCQUM1QixNQUFNLE9BQU8sQ0FBQztZQUVmLEVBQUU7a0JBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFlLE9BQU87a0JBQzdCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBVSxPQUFPLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBd0NLLE9BQUUsR0FBRyxDQUFDLElBQXNCO1lBQ2xDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxjQUFPLENBQUMsTUFBTSxDQUFDO2tCQUNuQixJQUFJO2tCQUNKLE1BQU0sQ0FBQztRQUNYLENBQUMsQ0FBQztRQVpELElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksY0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQUMsTUFBTSxPQUFPLElBQUksSUFBSSxrQkFBUyxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXpHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FB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