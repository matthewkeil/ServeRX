"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const _1 = require("./");
class Segment extends Array {
    constructor() {
        super(...arguments);
        this._update = (arg, id) => {
            let results = id
                ? Segment.validateId(arg)
                : Segment.validateValue(arg);
            if (results instanceof Error)
                throw results;
            id
                ? this[0] = results
                : this[1] = results;
        };
        this.match = (path) => Segment.match(path, this);
    }
    get id() {
        return this[0];
    }
    ;
    set id(arg) {
        this._update(arg, true);
        if (this[0].startsWith(':') && util_1.isNull(this[1]))
            this[1] = undefined;
        if (!this[0].startsWith(':') && !util_1.isNull(this[1]))
            this[1] = null;
    }
    ;
    get val() {
        return this[1];
    }
    ;
    set val(arg) {
        this._update(arg, false);
        if (util_1.isNull(this[1]) && this[0].startsWith(':'))
            this[0] = this[0].substr(1);
        if (!util_1.isNull(this[1]) && !this[0].startsWith(':'))
            this[0] = `:${this[0]}`;
    }
    ;
    get isParam() {
        return !util_1.isNull(this[1]);
    }
    ;
}
Segment.ValidIdentifier = /^~|(?:\/?:?([-\w]+))$/;
Segment.ValidValue = /=?([^\/]*)\/?$/;
Segment.ValidSegment = /^(~)|(?:\/?(:?)([-\w]+)(?:=([^\/]*))?\/?)$/;
Segment.validateId = (arg) => {
    let id;
    if (util_1.isString(arg))
        return (id = Segment.ValidIdentifier.exec(arg))
            ? id[1]
            : new _1.PathError('invalid identifier string', arg);
    return new _1.PathError('invalid segment identifier type', arg);
};
Segment.validateValue = (arg) => {
    if (util_1.isUndefined(arg) || util_1.isNull(arg))
        return arg;
    if (util_1.isString(arg)) {
        let results = Segment.ValidValue.exec(arg);
        if (util_1.isNull(results))
            return new _1.PathError('invalid segment value string', arg);
        let value = results[1];
        switch (value) {
            case '':
            case 'undef':
            case 'undefined':
                return undefined;
            case 'null':
                return null;
            default:
                return value;
        }
    }
    return new _1.PathError('value must be a valid string, null or undefined', arg);
};
Segment.validate = (arg) => {
    if (arg instanceof Segment)
        return [arg[0], arg[1]];
    if (util_1.isString(arg)) {
        let results = Segment.ValidSegment.exec(arg);
        if (results === null)
            return undefined;
        let [param, identifier, value] = results.slice(1);
        if (param === '~')
            return ['~', null];
        let val = null;
        if (value)
            val = Segment.validateValue(value);
        else if (param === ':')
            val = '*';
        return util_1.isError(val)
            ? val
            : [param.concat(identifier), val];
    }
    if (util_1.isArray(arg) && (arg.length === 2)) {
        let id = Segment.validateId(arg[0]);
        let val = Segment.validateValue(arg[1]);
        if (!util_1.isError(id)) {
            if (util_1.isError(val))
                return val;
            if (id.startsWith(':') && util_1.isNull(val))
                return new _1.PathError('parameter values cannot be null');
            if (!id.startsWith(':') && !util_1.isNull(val))
                return new _1.PathError('route values must be null');
            return [id, val];
        }
        return undefined;
    }
    return undefined;
};
Segment.match = (path, here) => {
    let results = Segment.validate(path);
    if (util_1.isError(results))
        return new _1.PathError('path is invalid', path);
    results = Segment.validate(here);
    if (util_1.isError(results))
        return new _1.PathError('here is invalid', here);
    if (path === here)
        return 'yes';
    if (util_1.isNull(path[1])) {
        // matches value param at end of here or a star handler that came in as a value
        if (here[1] === '*' || util_1.isUndefined(here[1]))
            return 'maybe';
        // matches value param mid-path
        if (path[0] === here[1])
            return 'value';
    }
    return 'no';
};
exports.Segment = Segment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VnbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNlZ21lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFNYztBQUVkLHlCQUd3QjtBQVV4QixhQUFxQixTQUFRLEtBQXlCO0lBQXREOztRQThHUyxZQUFPLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBVztZQUV2QyxJQUFJLE9BQU8sR0FBRyxFQUFFO2tCQUNiLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO2tCQUN2QixPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTlCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sWUFBWSxLQUFLLENBQUM7Z0JBQzVCLE1BQU0sT0FBTyxDQUFDO1lBRWYsRUFBRTtrQkFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQWUsT0FBTztrQkFDN0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFVLE9BQU8sQ0FBQztRQUM3QixDQUFDLENBQUM7UUE4QkssVUFBSyxHQUFHLENBQUMsSUFBc0IsS0FBSyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBekJBLElBQUksRUFBRTtRQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUFBLENBQUM7SUFFRixJQUFJLEVBQUUsQ0FBQyxHQUFlO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksYUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUNwRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FB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